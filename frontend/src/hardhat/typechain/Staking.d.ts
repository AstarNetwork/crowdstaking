/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface StakingInterface extends ethers.utils.Interface {
  functions: {
    "purge_keys()": FunctionFragment;
    "register_as_candidate()": FunctionFragment;
    "set_keys(bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "purge_keys",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "register_as_candidate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "set_keys", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "purge_keys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "register_as_candidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set_keys", data: BytesLike): Result;

  events: {};
}

export class Staking extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: StakingInterface;

  functions: {
    purge_keys(overrides?: Overrides): Promise<ContractTransaction>;

    "purge_keys()"(overrides?: Overrides): Promise<ContractTransaction>;

    register_as_candidate(overrides?: Overrides): Promise<ContractTransaction>;

    "register_as_candidate()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    set_keys(
      keys: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "set_keys(bytes)"(
      keys: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  purge_keys(overrides?: Overrides): Promise<ContractTransaction>;

  "purge_keys()"(overrides?: Overrides): Promise<ContractTransaction>;

  register_as_candidate(overrides?: Overrides): Promise<ContractTransaction>;

  "register_as_candidate()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  set_keys(
    keys: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "set_keys(bytes)"(
    keys: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    purge_keys(overrides?: CallOverrides): Promise<void>;

    "purge_keys()"(overrides?: CallOverrides): Promise<void>;

    register_as_candidate(overrides?: CallOverrides): Promise<void>;

    "register_as_candidate()"(overrides?: CallOverrides): Promise<void>;

    set_keys(keys: BytesLike, overrides?: CallOverrides): Promise<void>;

    "set_keys(bytes)"(
      keys: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    purge_keys(overrides?: Overrides): Promise<BigNumber>;

    "purge_keys()"(overrides?: Overrides): Promise<BigNumber>;

    register_as_candidate(overrides?: Overrides): Promise<BigNumber>;

    "register_as_candidate()"(overrides?: Overrides): Promise<BigNumber>;

    set_keys(keys: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "set_keys(bytes)"(
      keys: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    purge_keys(overrides?: Overrides): Promise<PopulatedTransaction>;

    "purge_keys()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    register_as_candidate(overrides?: Overrides): Promise<PopulatedTransaction>;

    "register_as_candidate()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    set_keys(
      keys: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "set_keys(bytes)"(
      keys: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
