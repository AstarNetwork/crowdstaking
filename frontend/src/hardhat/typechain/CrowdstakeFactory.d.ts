/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CrowdstakeFactoryInterface extends ethers.utils.Interface {
  functions: {
    "create(uint256,uint256)": FunctionFragment;
    "instances(uint256)": FunctionFragment;
    "last_instance()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "create",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "instances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "last_instance",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "instances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "last_instance",
    data: BytesLike
  ): Result;

  events: {
    "NewCrowdstake(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewCrowdstake"): EventFragment;
}

export class CrowdstakeFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CrowdstakeFactoryInterface;

  functions: {
    create(
      duration_days: BigNumberish,
      fee_percent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "create(uint256,uint256)"(
      duration_days: BigNumberish,
      fee_percent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    instances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "instances(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    last_instance(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "last_instance()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;
  };

  create(
    duration_days: BigNumberish,
    fee_percent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "create(uint256,uint256)"(
    duration_days: BigNumberish,
    fee_percent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  instances(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "instances(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  last_instance(overrides?: CallOverrides): Promise<BigNumber>;

  "last_instance()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    create(
      duration_days: BigNumberish,
      fee_percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "create(uint256,uint256)"(
      duration_days: BigNumberish,
      fee_percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    instances(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "instances(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    last_instance(overrides?: CallOverrides): Promise<BigNumber>;

    "last_instance()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    NewCrowdstake(instance: string | null): EventFilter;
  };

  estimateGas: {
    create(
      duration_days: BigNumberish,
      fee_percent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "create(uint256,uint256)"(
      duration_days: BigNumberish,
      fee_percent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    instances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "instances(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    last_instance(overrides?: CallOverrides): Promise<BigNumber>;

    "last_instance()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    create(
      duration_days: BigNumberish,
      fee_percent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "create(uint256,uint256)"(
      duration_days: BigNumberish,
      fee_percent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    instances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "instances(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    last_instance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "last_instance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
